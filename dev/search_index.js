var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConfigEnv","category":"page"},{"location":"#ConfigEnv","page":"Home","title":"ConfigEnv","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConfigEnv]","category":"page"},{"location":"#ConfigEnv.dotenv","page":"Home","title":"ConfigEnv.dotenv","text":"dotenv(path1, path2, ...; overwrite = true)\n\ndotenv reads .env files from your path, parse their content, merge them together, stores result to ENV, and finally return a EnvProxyDict with the content. If no path argument is given , then  .env is used as a default path. During merge procedure, if duplicate keys encountered then value from the rightmost dictionary is used.\n\nBy default if key already exists in ENV it is overwritten with the values in .env file.  This behaviour can be changed by setting overwrite flag to false or using dual dotenvx function.\n\nExamples\n\n# .env\nFOO = bar\nUSER = john_doe\n\n# julia REPL\n# load key-value pairs from \".env\", `ENV` duplicate keys are overwritten\njulia> ENV[\"USER\"]\nuser1\njulia> cfg = dotenv()\njulia> ENV[\"FOO\"]\nbar\njulia> ENV[\"USER\"]\njohn_doe\njulia> cfg[\"USER\"]\njohn_doe\n\n\n\n\n\n","category":"function"},{"location":"#ConfigEnv.dotenvx-Tuple","page":"Home","title":"ConfigEnv.dotenvx","text":"dotenvx(path1, path2, ...; overwrite = false)\n\ndotenvx reads .env files from your path, parse their content, merge them together, stores result to ENV, and finally return a EnvProxyDict with the content. If no path argument is given , then  .env is used as a default path. During merge procedure, if duplicate keys encountered then value from the rightmost dictionary is used.\n\nBy default if key already exists in ENV it is overwritten with the values in .env file.  This behaviour can be changed by setting overwrite flag to true or using dual dotenv function.\n\nExamples\n\n# .env\nFOO = bar\nUSER = john_doe\n\n# julia REPL\n# load key-value pairs from \".env\", `ENV` duplicate keys are not overwritten\njulia> ENV[\"USER\"]\nuser1\njulia> cfg = dotenvx()\njulia> ENV[\"FOO\"]\nbar\njulia> ENV[\"USER\"]\nuser1\njulia> cfg[\"USER\"]\njohn_doe\n\n\n\n\n\n","category":"method"},{"location":"#ConfigEnv.parse-Tuple{Any}","page":"Home","title":"ConfigEnv.parse","text":"ConfigEnv.parse accepts a String or an IOBuffer (any value that  can be converted into String), and returns a Dict with  the parsed keys and values.\n\n\n\n\n\n","category":"method"}]
}
